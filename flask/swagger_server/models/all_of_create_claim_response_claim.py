# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server import util


class AllOfCreateClaimResponseClaim(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, donor_participant: Object=None, id: str=None, status: str=None, resolution_period_end: datetime=None, completion_period_end: datetime=None, last_modified: datetime=None):  # noqa: E501
        """AllOfCreateClaimResponseClaim - a model defined in Swagger

        :param donor_participant: The donor_participant of this AllOfCreateClaimResponseClaim.  # noqa: E501
        :type donor_participant: Object
        :param id: The id of this AllOfCreateClaimResponseClaim.  # noqa: E501
        :type id: str
        :param status: The status of this AllOfCreateClaimResponseClaim.  # noqa: E501
        :type status: str
        :param resolution_period_end: The resolution_period_end of this AllOfCreateClaimResponseClaim.  # noqa: E501
        :type resolution_period_end: datetime
        :param completion_period_end: The completion_period_end of this AllOfCreateClaimResponseClaim.  # noqa: E501
        :type completion_period_end: datetime
        :param last_modified: The last_modified of this AllOfCreateClaimResponseClaim.  # noqa: E501
        :type last_modified: datetime
        """
        self.swagger_types = {
            'donor_participant': Object,
            'id': str,
            'status': str,
            'resolution_period_end': datetime,
            'completion_period_end': datetime,
            'last_modified': datetime
        }

        self.attribute_map = {
            'donor_participant': 'DonorParticipant',
            'id': 'Id',
            'status': 'Status',
            'resolution_period_end': 'ResolutionPeriodEnd',
            'completion_period_end': 'CompletionPeriodEnd',
            'last_modified': 'LastModified'
        }
        self._donor_participant = donor_participant
        self._id = id
        self._status = status
        self._resolution_period_end = resolution_period_end
        self._completion_period_end = completion_period_end
        self._last_modified = last_modified

    @classmethod
    def from_dict(cls, dikt) -> 'AllOfCreateClaimResponseClaim':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AllOfCreateClaimResponseClaim of this AllOfCreateClaimResponseClaim.  # noqa: E501
        :rtype: AllOfCreateClaimResponseClaim
        """
        return util.deserialize_model(dikt, cls)

    @property
    def donor_participant(self) -> Object:
        """Gets the donor_participant of this AllOfCreateClaimResponseClaim.


        :return: The donor_participant of this AllOfCreateClaimResponseClaim.
        :rtype: Object
        """
        return self._donor_participant

    @donor_participant.setter
    def donor_participant(self, donor_participant: Object):
        """Sets the donor_participant of this AllOfCreateClaimResponseClaim.


        :param donor_participant: The donor_participant of this AllOfCreateClaimResponseClaim.
        :type donor_participant: Object
        """

        self._donor_participant = donor_participant

    @property
    def id(self) -> str:
        """Gets the id of this AllOfCreateClaimResponseClaim.


        :return: The id of this AllOfCreateClaimResponseClaim.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this AllOfCreateClaimResponseClaim.


        :param id: The id of this AllOfCreateClaimResponseClaim.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self) -> str:
        """Gets the status of this AllOfCreateClaimResponseClaim.


        :return: The status of this AllOfCreateClaimResponseClaim.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this AllOfCreateClaimResponseClaim.


        :param status: The status of this AllOfCreateClaimResponseClaim.
        :type status: str
        """
        allowed_values = ["OPEN", "WAITING_RESOLUTION", "CONFIRMED", "CANCELLED", "COMPLETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def resolution_period_end(self) -> datetime:
        """Gets the resolution_period_end of this AllOfCreateClaimResponseClaim.

        Data-hora quando termina o período de resolução.  # noqa: E501

        :return: The resolution_period_end of this AllOfCreateClaimResponseClaim.
        :rtype: datetime
        """
        return self._resolution_period_end

    @resolution_period_end.setter
    def resolution_period_end(self, resolution_period_end: datetime):
        """Sets the resolution_period_end of this AllOfCreateClaimResponseClaim.

        Data-hora quando termina o período de resolução.  # noqa: E501

        :param resolution_period_end: The resolution_period_end of this AllOfCreateClaimResponseClaim.
        :type resolution_period_end: datetime
        """
        if resolution_period_end is None:
            raise ValueError("Invalid value for `resolution_period_end`, must not be `None`")  # noqa: E501

        self._resolution_period_end = resolution_period_end

    @property
    def completion_period_end(self) -> datetime:
        """Gets the completion_period_end of this AllOfCreateClaimResponseClaim.

        Data-hora quando termina o período de encerramento. Apenas para reivindicação de posse.  # noqa: E501

        :return: The completion_period_end of this AllOfCreateClaimResponseClaim.
        :rtype: datetime
        """
        return self._completion_period_end

    @completion_period_end.setter
    def completion_period_end(self, completion_period_end: datetime):
        """Sets the completion_period_end of this AllOfCreateClaimResponseClaim.

        Data-hora quando termina o período de encerramento. Apenas para reivindicação de posse.  # noqa: E501

        :param completion_period_end: The completion_period_end of this AllOfCreateClaimResponseClaim.
        :type completion_period_end: datetime
        """

        self._completion_period_end = completion_period_end

    @property
    def last_modified(self) -> datetime:
        """Gets the last_modified of this AllOfCreateClaimResponseClaim.

        Data-hora da última modificação do status da reivindicação  # noqa: E501

        :return: The last_modified of this AllOfCreateClaimResponseClaim.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified: datetime):
        """Sets the last_modified of this AllOfCreateClaimResponseClaim.

        Data-hora da última modificação do status da reivindicação  # noqa: E501

        :param last_modified: The last_modified of this AllOfCreateClaimResponseClaim.
        :type last_modified: datetime
        """
        if last_modified is None:
            raise ValueError("Invalid value for `last_modified`, must not be `None`")  # noqa: E501

        self._last_modified = last_modified
