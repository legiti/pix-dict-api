# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.confirm_claim_requestproperties_reason import ConfirmClaimRequestpropertiesReason  # noqa: F401,E501
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server import util


class CancelClaimRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, signature: object=None, claim_id: str=None, participant: AllOfCancelClaimRequestParticipant=None, reason: ConfirmClaimRequestpropertiesReason=None):  # noqa: E501
        """CancelClaimRequest - a model defined in Swagger

        :param signature: The signature of this CancelClaimRequest.  # noqa: E501
        :type signature: object
        :param claim_id: The claim_id of this CancelClaimRequest.  # noqa: E501
        :type claim_id: str
        :param participant: The participant of this CancelClaimRequest.  # noqa: E501
        :type participant: AllOfCancelClaimRequestParticipant
        :param reason: The reason of this CancelClaimRequest.  # noqa: E501
        :type reason: ConfirmClaimRequestpropertiesReason
        """
        self.swagger_types = {
            'signature': object,
            'claim_id': str,
            'participant': AllOfCancelClaimRequestParticipant,
            'reason': ConfirmClaimRequestpropertiesReason
        }

        self.attribute_map = {
            'signature': 'Signature',
            'claim_id': 'ClaimId',
            'participant': 'Participant',
            'reason': 'Reason'
        }
        self._signature = signature
        self._claim_id = claim_id
        self._participant = participant
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt) -> 'CancelClaimRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CancelClaimRequest of this CancelClaimRequest.  # noqa: E501
        :rtype: CancelClaimRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def signature(self) -> object:
        """Gets the signature of this CancelClaimRequest.


        :return: The signature of this CancelClaimRequest.
        :rtype: object
        """
        return self._signature

    @signature.setter
    def signature(self, signature: object):
        """Sets the signature of this CancelClaimRequest.


        :param signature: The signature of this CancelClaimRequest.
        :type signature: object
        """

        self._signature = signature

    @property
    def claim_id(self) -> str:
        """Gets the claim_id of this CancelClaimRequest.


        :return: The claim_id of this CancelClaimRequest.
        :rtype: str
        """
        return self._claim_id

    @claim_id.setter
    def claim_id(self, claim_id: str):
        """Sets the claim_id of this CancelClaimRequest.


        :param claim_id: The claim_id of this CancelClaimRequest.
        :type claim_id: str
        """
        if claim_id is None:
            raise ValueError("Invalid value for `claim_id`, must not be `None`")  # noqa: E501

        self._claim_id = claim_id

    @property
    def participant(self) -> AllOfCancelClaimRequestParticipant:
        """Gets the participant of this CancelClaimRequest.


        :return: The participant of this CancelClaimRequest.
        :rtype: AllOfCancelClaimRequestParticipant
        """
        return self._participant

    @participant.setter
    def participant(self, participant: AllOfCancelClaimRequestParticipant):
        """Sets the participant of this CancelClaimRequest.


        :param participant: The participant of this CancelClaimRequest.
        :type participant: AllOfCancelClaimRequestParticipant
        """
        if participant is None:
            raise ValueError("Invalid value for `participant`, must not be `None`")  # noqa: E501

        self._participant = participant

    @property
    def reason(self) -> ConfirmClaimRequestpropertiesReason:
        """Gets the reason of this CancelClaimRequest.


        :return: The reason of this CancelClaimRequest.
        :rtype: ConfirmClaimRequestpropertiesReason
        """
        return self._reason

    @reason.setter
    def reason(self, reason: ConfirmClaimRequestpropertiesReason):
        """Sets the reason of this CancelClaimRequest.


        :param reason: The reason of this CancelClaimRequest.
        :type reason: ConfirmClaimRequestpropertiesReason
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason
