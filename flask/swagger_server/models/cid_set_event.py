# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
import re  # noqa: F401,E501
from swagger_server import util


class CidSetEvent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, cid: str=None, timestamp: datetime=None):  # noqa: E501
        """CidSetEvent - a model defined in Swagger

        :param type: The type of this CidSetEvent.  # noqa: E501
        :type type: str
        :param cid: The cid of this CidSetEvent.  # noqa: E501
        :type cid: str
        :param timestamp: The timestamp of this CidSetEvent.  # noqa: E501
        :type timestamp: datetime
        """
        self.swagger_types = {
            'type': str,
            'cid': str,
            'timestamp': datetime
        }

        self.attribute_map = {
            'type': 'Type',
            'cid': 'Cid',
            'timestamp': 'Timestamp'
        }
        self._type = type
        self._cid = cid
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'CidSetEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CidSetEvent of this CidSetEvent.  # noqa: E501
        :rtype: CidSetEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this CidSetEvent.


        :return: The type of this CidSetEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this CidSetEvent.


        :param type: The type of this CidSetEvent.
        :type type: str
        """
        allowed_values = ["ADDED", "REMOVED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def cid(self) -> str:
        """Gets the cid of this CidSetEvent.

        Identificador de conteúdo  # noqa: E501

        :return: The cid of this CidSetEvent.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid: str):
        """Sets the cid of this CidSetEvent.

        Identificador de conteúdo  # noqa: E501

        :param cid: The cid of this CidSetEvent.
        :type cid: str
        """

        self._cid = cid

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this CidSetEvent.

        Data-hora do evento  # noqa: E501

        :return: The timestamp of this CidSetEvent.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this CidSetEvent.

        Data-hora do evento  # noqa: E501

        :param timestamp: The timestamp of this CidSetEvent.
        :type timestamp: datetime
        """

        self._timestamp = timestamp
