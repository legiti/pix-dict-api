# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.entryproperties_account import EntrypropertiesAccount  # noqa: F401,E501
from swagger_server.models.entryproperties_key import EntrypropertiesKey  # noqa: F401,E501
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server import util


class Claim(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, key: EntrypropertiesKey=None, key_type: AllOfClaimKeyType=None, claimer_account: EntrypropertiesAccount=None, claimer: OneOfClaimClaimer=None):  # noqa: E501
        """Claim - a model defined in Swagger

        :param type: The type of this Claim.  # noqa: E501
        :type type: str
        :param key: The key of this Claim.  # noqa: E501
        :type key: EntrypropertiesKey
        :param key_type: The key_type of this Claim.  # noqa: E501
        :type key_type: AllOfClaimKeyType
        :param claimer_account: The claimer_account of this Claim.  # noqa: E501
        :type claimer_account: EntrypropertiesAccount
        :param claimer: The claimer of this Claim.  # noqa: E501
        :type claimer: OneOfClaimClaimer
        """
        self.swagger_types = {
            'type': str,
            'key': EntrypropertiesKey,
            'key_type': AllOfClaimKeyType,
            'claimer_account': EntrypropertiesAccount,
            'claimer': OneOfClaimClaimer
        }

        self.attribute_map = {
            'type': 'Type',
            'key': 'Key',
            'key_type': 'KeyType',
            'claimer_account': 'ClaimerAccount',
            'claimer': 'Claimer'
        }
        self._type = type
        self._key = key
        self._key_type = key_type
        self._claimer_account = claimer_account
        self._claimer = claimer

    @classmethod
    def from_dict(cls, dikt) -> 'Claim':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Claim of this Claim.  # noqa: E501
        :rtype: Claim
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Claim.

        Tipo de reivindicação  # noqa: E501

        :return: The type of this Claim.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Claim.

        Tipo de reivindicação  # noqa: E501

        :param type: The type of this Claim.
        :type type: str
        """
        allowed_values = ["OWNERSHIP", "PORTABILITY"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def key(self) -> EntrypropertiesKey:
        """Gets the key of this Claim.


        :return: The key of this Claim.
        :rtype: EntrypropertiesKey
        """
        return self._key

    @key.setter
    def key(self, key: EntrypropertiesKey):
        """Sets the key of this Claim.


        :param key: The key of this Claim.
        :type key: EntrypropertiesKey
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def key_type(self) -> AllOfClaimKeyType:
        """Gets the key_type of this Claim.


        :return: The key_type of this Claim.
        :rtype: AllOfClaimKeyType
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type: AllOfClaimKeyType):
        """Sets the key_type of this Claim.


        :param key_type: The key_type of this Claim.
        :type key_type: AllOfClaimKeyType
        """
        if key_type is None:
            raise ValueError("Invalid value for `key_type`, must not be `None`")  # noqa: E501

        self._key_type = key_type

    @property
    def claimer_account(self) -> EntrypropertiesAccount:
        """Gets the claimer_account of this Claim.


        :return: The claimer_account of this Claim.
        :rtype: EntrypropertiesAccount
        """
        return self._claimer_account

    @claimer_account.setter
    def claimer_account(self, claimer_account: EntrypropertiesAccount):
        """Sets the claimer_account of this Claim.


        :param claimer_account: The claimer_account of this Claim.
        :type claimer_account: EntrypropertiesAccount
        """
        if claimer_account is None:
            raise ValueError("Invalid value for `claimer_account`, must not be `None`")  # noqa: E501

        self._claimer_account = claimer_account

    @property
    def claimer(self) -> OneOfClaimClaimer:
        """Gets the claimer of this Claim.


        :return: The claimer of this Claim.
        :rtype: OneOfClaimClaimer
        """
        return self._claimer

    @claimer.setter
    def claimer(self, claimer: OneOfClaimClaimer):
        """Sets the claimer of this Claim.


        :param claimer: The claimer of this Claim.
        :type claimer: OneOfClaimClaimer
        """
        if claimer is None:
            raise ValueError("Invalid value for `claimer`, must not be `None`")  # noqa: E501

        self._claimer = claimer
