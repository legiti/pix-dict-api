# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Counter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, by: str=None, d3: int=None, d30: int=None, m6: int=None):  # noqa: E501
        """Counter - a model defined in Swagger

        :param type: The type of this Counter.  # noqa: E501
        :type type: str
        :param by: The by of this Counter.  # noqa: E501
        :type by: str
        :param d3: The d3 of this Counter.  # noqa: E501
        :type d3: int
        :param d30: The d30 of this Counter.  # noqa: E501
        :type d30: int
        :param m6: The m6 of this Counter.  # noqa: E501
        :type m6: int
        """
        self.swagger_types = {
            'type': str,
            'by': str,
            'd3': int,
            'd30': int,
            'm6': int
        }

        self.attribute_map = {
            'type': 'type',
            'by': 'by',
            'd3': 'd3',
            'd30': 'd30',
            'm6': 'm6'
        }
        self._type = type
        self._by = by
        self._d3 = d3
        self._d30 = d30
        self._m6 = m6

    @classmethod
    def from_dict(cls, dikt) -> 'Counter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Counter of this Counter.  # noqa: E501
        :rtype: Counter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Counter.

        Tipo do contador.  # noqa: E501

        :return: The type of this Counter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Counter.

        Tipo do contador.  # noqa: E501

        :param type: The type of this Counter.
        :type type: str
        """
        allowed_values = ["SETTLEMENTS", "REPORTED_FRAUDS", "REPORTED_AML_CFT", "CONFIRMED_FRAUDS", "CONFIRMED_AML_CFT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def by(self) -> str:
        """Gets the by of this Counter.

        Agregador (chave, dono ou conta).  # noqa: E501

        :return: The by of this Counter.
        :rtype: str
        """
        return self._by

    @by.setter
    def by(self, by: str):
        """Sets the by of this Counter.

        Agregador (chave, dono ou conta).  # noqa: E501

        :param by: The by of this Counter.
        :type by: str
        """
        allowed_values = ["KEY", "OWNER", "ACCOUNT"]  # noqa: E501
        if by not in allowed_values:
            raise ValueError(
                "Invalid value for `by` ({0}), must be one of {1}"
                .format(by, allowed_values)
            )

        self._by = by

    @property
    def d3(self) -> int:
        """Gets the d3 of this Counter.

        Valor para os últimos 3 dias  # noqa: E501

        :return: The d3 of this Counter.
        :rtype: int
        """
        return self._d3

    @d3.setter
    def d3(self, d3: int):
        """Sets the d3 of this Counter.

        Valor para os últimos 3 dias  # noqa: E501

        :param d3: The d3 of this Counter.
        :type d3: int
        """

        self._d3 = d3

    @property
    def d30(self) -> int:
        """Gets the d30 of this Counter.

        Valor para os últimos 30 dias  # noqa: E501

        :return: The d30 of this Counter.
        :rtype: int
        """
        return self._d30

    @d30.setter
    def d30(self, d30: int):
        """Sets the d30 of this Counter.

        Valor para os últimos 30 dias  # noqa: E501

        :param d30: The d30 of this Counter.
        :type d30: int
        """

        self._d30 = d30

    @property
    def m6(self) -> int:
        """Gets the m6 of this Counter.

        Valor para os últimos 6 meses (sem contar o mês corrente)  # noqa: E501

        :return: The m6 of this Counter.
        :rtype: int
        """
        return self._m6

    @m6.setter
    def m6(self, m6: int):
        """Sets the m6 of this Counter.

        Valor para os últimos 6 meses (sem contar o mês corrente)  # noqa: E501

        :param m6: The m6 of this Counter.
        :type m6: int
        """

        self._m6 = m6
