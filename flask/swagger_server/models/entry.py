# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.entry_account import EntryAccount  # noqa: F401,E501
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server import util


class Entry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, key: str=None, key_type: str=None, account: EntryAccount=None, owner: OneOfEntryOwner=None):  # noqa: E501
        """Entry - a model defined in Swagger

        :param key: The key of this Entry.  # noqa: E501
        :type key: str
        :param key_type: The key_type of this Entry.  # noqa: E501
        :type key_type: str
        :param account: The account of this Entry.  # noqa: E501
        :type account: EntryAccount
        :param owner: The owner of this Entry.  # noqa: E501
        :type owner: OneOfEntryOwner
        """
        self.swagger_types = {
            'key': str,
            'key_type': str,
            'account': EntryAccount,
            'owner': OneOfEntryOwner
        }

        self.attribute_map = {
            'key': 'Key',
            'key_type': 'KeyType',
            'account': 'Account',
            'owner': 'Owner'
        }
        self._key = key
        self._key_type = key_type
        self._account = account
        self._owner = owner

    @classmethod
    def from_dict(cls, dikt) -> 'Entry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Entry of this Entry.  # noqa: E501
        :rtype: Entry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self) -> str:
        """Gets the key of this Entry.

        Chave de endereçamento  # noqa: E501

        :return: The key of this Entry.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this Entry.

        Chave de endereçamento  # noqa: E501

        :param key: The key of this Entry.
        :type key: str
        """

        self._key = key

    @property
    def key_type(self) -> str:
        """Gets the key_type of this Entry.

        Tipo de chave. _Novos tipos podem surgir_.  # noqa: E501

        :return: The key_type of this Entry.
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type: str):
        """Sets the key_type of this Entry.

        Tipo de chave. _Novos tipos podem surgir_.  # noqa: E501

        :param key_type: The key_type of this Entry.
        :type key_type: str
        """
        allowed_values = ["CPF", "CNPJ", "PHONE", "EMAIL", "EVP"]  # noqa: E501
        if key_type not in allowed_values:
            raise ValueError(
                "Invalid value for `key_type` ({0}), must be one of {1}"
                .format(key_type, allowed_values)
            )

        self._key_type = key_type

    @property
    def account(self) -> EntryAccount:
        """Gets the account of this Entry.


        :return: The account of this Entry.
        :rtype: EntryAccount
        """
        return self._account

    @account.setter
    def account(self, account: EntryAccount):
        """Sets the account of this Entry.


        :param account: The account of this Entry.
        :type account: EntryAccount
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def owner(self) -> OneOfEntryOwner:
        """Gets the owner of this Entry.


        :return: The owner of this Entry.
        :rtype: OneOfEntryOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner: OneOfEntryOwner):
        """Sets the owner of this Entry.


        :param owner: The owner of this Entry.
        :type owner: OneOfEntryOwner
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner
