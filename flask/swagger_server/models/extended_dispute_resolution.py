# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.object import Object  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class ExtendedDisputeResolution(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, result: str=None, refund_type: str=None, refund_transaction_id: str=None, details: Object=None):  # noqa: E501
        """ExtendedDisputeResolution - a model defined in Swagger

        :param result: The result of this ExtendedDisputeResolution.  # noqa: E501
        :type result: str
        :param refund_type: The refund_type of this ExtendedDisputeResolution.  # noqa: E501
        :type refund_type: str
        :param refund_transaction_id: The refund_transaction_id of this ExtendedDisputeResolution.  # noqa: E501
        :type refund_transaction_id: str
        :param details: The details of this ExtendedDisputeResolution.  # noqa: E501
        :type details: Object
        """
        self.swagger_types = {
            'result': str,
            'refund_type': str,
            'refund_transaction_id': str,
            'details': Object
        }

        self.attribute_map = {
            'result': 'Result',
            'refund_type': 'RefundType',
            'refund_transaction_id': 'RefundTransactionId',
            'details': 'Details'
        }
        self._result = result
        self._refund_type = refund_type
        self._refund_transaction_id = refund_transaction_id
        self._details = details

    @classmethod
    def from_dict(cls, dikt) -> 'ExtendedDisputeResolution':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExtendedDispute_Resolution of this ExtendedDisputeResolution.  # noqa: E501
        :rtype: ExtendedDisputeResolution
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result(self) -> str:
        """Gets the result of this ExtendedDisputeResolution.

        Resultado da resolução da disputa  # noqa: E501

        :return: The result of this ExtendedDisputeResolution.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result: str):
        """Sets the result of this ExtendedDisputeResolution.

        Resultado da resolução da disputa  # noqa: E501

        :param result: The result of this ExtendedDisputeResolution.
        :type result: str
        """
        allowed_values = ["ACCEPTED", "REJECTED"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def refund_type(self) -> str:
        """Gets the refund_type of this ExtendedDisputeResolution.

        Tipo de devolução  # noqa: E501

        :return: The refund_type of this ExtendedDisputeResolution.
        :rtype: str
        """
        return self._refund_type

    @refund_type.setter
    def refund_type(self, refund_type: str):
        """Sets the refund_type of this ExtendedDisputeResolution.

        Tipo de devolução  # noqa: E501

        :param refund_type: The refund_type of this ExtendedDisputeResolution.
        :type refund_type: str
        """
        allowed_values = ["FULL", "PARTIAL", "NO_REFUND"]  # noqa: E501
        if refund_type not in allowed_values:
            raise ValueError(
                "Invalid value for `refund_type` ({0}), must be one of {1}"
                .format(refund_type, allowed_values)
            )

        self._refund_type = refund_type

    @property
    def refund_transaction_id(self) -> str:
        """Gets the refund_transaction_id of this ExtendedDisputeResolution.

        Identificador da transação de devolução  # noqa: E501

        :return: The refund_transaction_id of this ExtendedDisputeResolution.
        :rtype: str
        """
        return self._refund_transaction_id

    @refund_transaction_id.setter
    def refund_transaction_id(self, refund_transaction_id: str):
        """Sets the refund_transaction_id of this ExtendedDisputeResolution.

        Identificador da transação de devolução  # noqa: E501

        :param refund_transaction_id: The refund_transaction_id of this ExtendedDisputeResolution.
        :type refund_transaction_id: str
        """

        self._refund_transaction_id = refund_transaction_id

    @property
    def details(self) -> Object:
        """Gets the details of this ExtendedDisputeResolution.

        Detalhes sobre a análise realizada  # noqa: E501

        :return: The details of this ExtendedDisputeResolution.
        :rtype: Object
        """
        return self._details

    @details.setter
    def details(self, details: Object):
        """Sets the details of this ExtendedDisputeResolution.

        Detalhes sobre a análise realizada  # noqa: E501

        :param details: The details of this ExtendedDisputeResolution.
        :type details: Object
        """

        self._details = details
