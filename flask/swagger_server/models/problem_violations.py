# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProblemViolations(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, reason: str=None, value: str=None, _property: str=None):  # noqa: E501
        """ProblemViolations - a model defined in Swagger

        :param reason: The reason of this ProblemViolations.  # noqa: E501
        :type reason: str
        :param value: The value of this ProblemViolations.  # noqa: E501
        :type value: str
        :param _property: The _property of this ProblemViolations.  # noqa: E501
        :type _property: str
        """
        self.swagger_types = {
            'reason': str,
            'value': str,
            '_property': str
        }

        self.attribute_map = {
            'reason': 'reason',
            'value': 'value',
            '_property': 'property'
        }
        self._reason = reason
        self._value = value
        self.__property = _property

    @classmethod
    def from_dict(cls, dikt) -> 'ProblemViolations':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Problem_violations of this ProblemViolations.  # noqa: E501
        :rtype: ProblemViolations
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reason(self) -> str:
        """Gets the reason of this ProblemViolations.


        :return: The reason of this ProblemViolations.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason: str):
        """Sets the reason of this ProblemViolations.


        :param reason: The reason of this ProblemViolations.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason

    @property
    def value(self) -> str:
        """Gets the value of this ProblemViolations.


        :return: The value of this ProblemViolations.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this ProblemViolations.


        :param value: The value of this ProblemViolations.
        :type value: str
        """

        self._value = value

    @property
    def _property(self) -> str:
        """Gets the _property of this ProblemViolations.


        :return: The _property of this ProblemViolations.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property: str):
        """Sets the _property of this ProblemViolations.


        :param _property: The _property of this ProblemViolations.
        :type _property: str
        """

        self.__property = _property
